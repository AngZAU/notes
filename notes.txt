-------------------------------------------------------------------------------
-- линукс
-----

найти утилиту атом
yum search atom

передать результат поиска утилите grep которая веснет только строки с текстом (text)
yum search atom|grep text

установитть утилиту atom пакетным менеджером dnf
sudo dnf install atom

-------------------------------------------------------------------------------
-- Текстовый редактор  Atom
-----

* Показать встроенный браузер для отладки страницы
Клацаем правой кнопкой мыши на текст html-страницы и выбираем пункт "Open Browser-Plus"

* ...

-------------------------------------------------------------------------------
-- HTML
-----

DOCTYPE - описание типа документа. Указываем браузеру на то, какой интепретатор использовать для нашего документа. Какой стандарт использовать.


                    DOCTYPE                                                                                 Описание
                    
                                                                                    HTML 4.01   
                    
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">                  Строгий синтаксис HTML

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//Transitionat//EN" "http://www.w3.org/TR/html4/loose.dtd">     Переходный синтаксис HTML

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//Frameset//EN" "http://www.w3.org/TR/html4/frameset.dtd">      В HTML-документе применяются фреймы

                                                                                    HTML 5

<!DOCTYPE html>                                                                                             В этой версии HTML только один доктайп

Тег <html> - контейнер, содержит все веб-страницу, включая <head> и <body>.
Тег <head> - информация о странице. В нем распологаются метатеги и ссылки на подключаемые модули.
Тег <body> - контейнер для всего содержимого, которое будет отображаться пользователю.

Блочные элементы <div>, <p>, <h1> - <h6>. Блочные элементы имеют форму прямоугольника.
Блочные элементы можно вкладывать друг в друга, а также можно в блочный элемент вложить строчные элементы.
Ширина блока занимает все доступное пространство - 100%.

Ширина блока состоит из следующих параметров:

 - ширина самого блока
 - Внешних отступов
 - Внутренних отступов (полей)
 - Границы блока
 
 Строчными называються элементы, которые являются частью другого элемента и используются, как правило, для изменения текста либо его логического форматирования.
 Могут применяться для изменения положения слоев.
 
 Разница между блочными и строчными элементами:
  - Строчные содержат данные или другие строчные эелементы.
  - Блочные размещаются с новой строки. сточные в той же строке.
  - Ширина строчных определяется по их содержимому, отступам и границам.

* Блочные элементы
<div> - тег предназначен для выделения фрагмента документа с целью изменения вида содержимого. Начинается с новой строки
<p> - параграф. При нескольких элементов между ними автоматически создаются вертикальные отступы и  после каждого параграфа делается перенос строки.
<pre> - предварительно форматированного текста. Как правило отображается моноширинным шрифтом и со всеми пробелами между словами
<hr /> - отображает горизонтальную линию, вид которой зависит от используемых параметров и браузера. Линия всегда начинается с новой строки и все элементы после нее отображаются с новой строки. 
<br /> - перенос на следующую строку. 
<blockquote> - выделение длинных цитат внутри текста. Текст внутри тега обозначается как выровненный блок с отступами
слева и справа примерно 40 пикселей.

Стандарт HTML не докускает более одного пробельного символа между словами.
В теге <p> убираются все переносы и отступы строк.
В теге <pre> сохраняются переносы, отступы и пробелы между строками. Отображается как правило другим шрифтом,
чем в редакторе.

Блочные элементы h1 - h6 - заголовки, структурируют контент веб-странице, подобно структуре книги - название, разделы,
подразделы. Разделены по важности.
h1 - наиболее важные, h2 - менее важные, h6 - самые незначительные.
Поисковые системы рекомендую следующее количество заголовков на странице:
h1 - должен быть один на странице
h2 - около 2-4
h3 - около 4-8

* Строчные элементы - теги физической и логической разметки, и некоторые теги, появившиеся в HTML5.
Теги физической разметки применяют для изменения внешнего вида элемента для отображения его пользователю.
Теги логической разметки предназначены для того, что части текста сделать более значимыми для поисковый систем и других
 устройств, которые могу разпознавать HTML.

 Теги физической разметки
 <b> </b>               - придает тексту жирное начертание
 <bdi></bdi>            - указывает фрагмент текста, которые должен быть изолирован от изменения направления вывода
                          текста. (HTML5)
 <bdo></bdo>            - устанавливает направление вывода текста. 
 <i></i>                - курсивное начертание текста
 <s></s>                - перечеркнутый текст
 <small></small>        - текст на 1 условную единицу меньше
 <big></big>            - текст на 1 условную единицу больше
 <sup></sup>            - содержимое в верхний индекс
 <sub></sub>            - содержимое в нижний индекс
 <meter></meter>        - используется для вывода значения в некотором известном диапазоне (HTML5)
 <progress></progress>  - используется для отображения прогресса завершенности (HTML5)
 <u></u>                - подчеркивания текста. Не рекомендуется использовать в HTML5
 
 Атрибуты тега meter:
 value      - заданное значение
 min        - минимально возможное значение
 max        - максимально возможное значение
 low        - задает предел, при достижении которого значение считается низким
 high       - задает предел, при достижении которого значение считается высоким
 optimum    - определяет наилучшее значение
 
 Атрибуты тега progress:
 value      - текущее значение
 max        - максимальное значение

Тег MARQUEE - это контейнер, который все текстовое содержимое внутри себя реализует в бегущую строку.
Атрибу:
loop - указывает количество итераций, т.е. количество раз, сколько пробежит строка. Текст двигается рывками. Лучше это реализовано в javascript
 
 Теги логическое разметки
 <abbr></abbr>      - текст внутри - аббревиатура. В атрибуте title указывают полное значение аббревиатуры
 <cite></cite>      - текст является сноской или цитатой
 <code></code>      - хранение текста-программный код
 <strong></strong>  - жирное начертание текста
 <em></em>          - курсивное начертание текста
 <del></del>        - выделение текста, который был удален в новой версии документа
 <ins></ins>        - выделение текста, который был добавлен в новой версии документа
 <mark></mark>      - текст как выделеный
 <q></q>            - текст в цитату
 <samp></samp>      - текст, который выводится в результате работы какой-либо программы
 <var></var>        - выделения переменных компьютерных программ
 
 
 Атрибут dir указывает направление и отображение текста. Значения:
 ltr - текст отображается слево направо
 rtl - текст отображается справа налево
 auto - значение по умолчанию
  
 Атрибуты тега <del>:
 cite       - содержит ссылку на документ, в котором указана причина изменения текста
 datetime   - седержит дату и время редактирования

 Атрибуты тега <ins>:
 cite       - содержит ссылку на документ, в котором указана причина изменения текста
 datetime   - седержит дату и время редактирования

 Атрибуты тега <q>:
 cite       - содержит адрес источника цитат
 
 Атрибуты тега <a>:
 accesskey  - активация ссылки комбинацией клавиш
 download   - предлагает скачать указанный файл
 href       - адрес документа, к которому происходит переход
 name       - имя якоря внутри документа
 target     - имя окна или фрейма, куда необходимо загружать страницу
 title      - устанавливает всплывающую подсказку
 type       - указывает MIME-тип документа, на который идет ссылка
 
 Тег <a> используется для создания якоря. Якорь - это значение в тексте, на которое можно создать ссылку.
 Для этого нужно проименовать якорь, дав ему имя name, а в ссылке на него указать слева ссылку на себя #, а затем имя
 <a href="#C4"> - формат ссылки на якорь
 <a name="C4">  - формат якоря          
атрибут target="_blank" откроет страницу, на которую указывает ссылка, в другом окне
можно перейти с середины страницы на верх:
<a href="#">Jump to Top</a>
 
 Специальные символы
 
 Имя        Символ  Описание
 
 &lt;       <       знак меньше   
 &gt;       >       знак больше
 &nbsp;             символ неразрывного пробела
 &shy;              символ мягкого переноса
 &rdquo;    "       Правая двойная кавычка    
 &ldquo;    "       Левая двойная кавычка    
 &amp;      &       Символ амперсанда
 
поиск специальных символов, пишем запрос в гугл: html entities, переходим на сайт dev.w3.org

 Тег изображения <img/>, атрибуты:
 src            - адрес графического файла
 alt            - альтернативный текст для изображения
 wtitle         - текст всплывающей подсказке
 widht,height   - ширина и высота изображения
 usemap         - связывает между собой картинку и карту-изображение, задаваемую с помощью контейнера <map>.

 Для представления графического изображения в виде карты с активными областями служит тег <map>, 
 щелкая мышью на активные области можно переходить на разные адреса.
 
 Связывание изображения с описанными областями происходит при помощи атрибута usemap у изображения 
 и атрибута name у карты областей.
 
 
 Тег <map></map> содержит области, описанные тегом <area /> со следующими атрибутами:
    - alt       -   альтернативный текст для области изображения
    - coords    -   координаты активной области
    - href      -   адрес документа, на который ведет ссылка
    - hreflang  -   язык документа, на который ведет ссылка (HTML5)
    - shape     -   форма области
    - target    -   имя окна или фрейма, куда браузер будет загружать документ
    - type      -   устанавливает MIME - тип документа, на который ведет ссылка
    
Валидация - это проверка документа на соответствие веб-стандартам и выявление существующих ошибок.
Код веб-страницы должен подчиняться определенным правилам, которые называется спецификацией, ее разрабатывает W3 Консорциум при поддержке
разработчиков браузеров.
validator.w3.org - ресурсорганизации W3C для валидации страниц.
    
Для создания таблицы используется тег <table></table>. 
Все теги, относящиеся к таблице, должны располагаться в нем.

Теги таблицы

    <caption> </caption>    задает название таблицы, которое будет размещено над таблицей. Разместить сразу после открывающего тега <table>
    <thead> </thead>        предназначен для хранения строк, которые представлены вверху таблицы
    <tbody> </tbody>        для хранения содержимого таблицы. Позволяет создать структурные блоки и управлять их оформлением с помощью стилей
    <tfoot> </tfoot>        для хранения информации внизу таблице. В коде должен быть определен до тела таблицы, хотя отображается внизу
    <tr></tr>               определение строк таблицы
    <td></td>               определение ячеек таблицы
    <th></th>               определение заглавных ячеек таблицы

Атрибуты тега <table></table>
    
    Cellspasing     устанавливает отступы между ячейками таблицы и от границы таблицы (устарел в HTML5)
    Cellpadding     устанавливает отступы внутри ячейки, т.е. отступы от границы ячкйки до ее содержимого (устарел в HTML5)
    rules           указывает браузеру, где отображать границы между ячейками. Значения - groups, cols, none, rows.(устарел в HTML5) 

Атрибуты тега <td></td> и <th></th>
    
    Colspan     устанавливает число ячеек, которые должны быть объединены по горизонтали
    Rowspan     устанавливает число ячеек, которые должны быть объединены по вертикали

Тег <colgroup></colgroup> - структурирует стоблцы, выделяя однородные ячейки. Группирует одн или более столбцов для
единого форматирования, позволяя применить стили к столбцам вместо того, чтобы повторять стили для каждой ячейки

Тег <col></col> - формирует группы столбцов, которые делят таблицу на разделы, не содержащие информацию одного типа.
Атрибут <span> данного тега позволяет установить количество столюцов для объединения.

Списки:
<ul></ul>   маркированный список. Каждый элемент списка представлен тегом <li></li> и отмечается маркером.
<ol></ol>   нумерованный список. Каждый элемент списка представлен тегом <li></li> и отмечается цифрой.
<dl></dl>   список определений. Состоит из пар термин(тег <dt></dt>) - определение (тег <dd></dd>).

Нумерованный список <ol></ol>
    type        A - нумерация большими латинскими буквами, a - маленькие латинские буквы, I - большие римские цифры,
    i - маленькие римские цифры.
    reversed    отображение списка в обратном порядке. Не работает в IE
    start       начальное значение, от которого пойдет отсчет нумерации
    value       изменение нумерации

Семантические элементы
<article></article> - элемент определяет независимый и самодостаточный контент. Может быть вложен в тег <section>,
так и <section> в <article>.
<aside></aside>     - определяет контент, находящийся в стороне от контента, внутри которого он расположен.
<footer></footer>   - предназначен для определения "подвала" документа или раздела
<header></header>   - предназначен для определения заголовочного блока или "шапки" документа или раздела.
<main></main>       - определяет основной контент документа
<nav></nav>         - предназначен для группировки ссылок навигации
<section></section> - элемент определяет раздел в документе

В <article> есть атрибут contenteditable. Он обеспечивает возможность редактитровать страницу непосредственно через браузер


Для добавления аудио используется <audio>
<audio src="name.ogg" controls>
    <a href="name.ogg">Download</a>
</audio>
Атрибуты:
autoplay - автоматическое воспроизведение аудиофайла.
controls - указывает, что нужно отобразить элементы управления вопроизведением.
loop     - циклическое воспроизведение аудиофайла.
muted    - выключить звук при вопроизведении.
preload  - предварительная загрузка контента. Некоторые браузеры игнорируют. Следующие значения:
    auto    - загружает файл полностью
    metadata- загружается только небольшая часть файла, чтобы определить основные характеристики
    none    - отсутствие автоматической загрузки.
src      - содержит путь к аудиофайлу

На данный момент нет аудио формата, который бы работал во всех браузерах. Рекомендуется включать несколько источников
звука с помощью элемента <source>

Для добавления видео используется video
имеет те же атрибуты, что и тег audio и несколько дополнительных
height  - задает высоту окна для отображения видеоданнх
poster  - позволяет задать путь к изображению, которое будет отображаться до воспроизведения видеофайла
width   - задает ширину окна для отображения видеоданых

На данный момент нет видео формата, который бы работал во всех браузерах. Рекомендуется включать несколько источников
видео с помощью элемента <source>

Тег form представляет собой контейнер для веб-формы, размещенной на веб странице. Реализуется возможность обмена данными
между клиентом и сервером.
Атрибуты:
action          - ссылка на ресурс или страницу, куда будут отправлятся данные
method          - метод запроса к серверу. Есть два основных значения: Post и Get (по умолчанию)
encrypte        - указывает тип передаваемых данных, по умолчанию application/x-www-form-urlencoded
autocomplete    - контролирует авто заполнение форм

Метод Get яв-ся одним из самых распространенных и предназначен для получения требуемой информации и передачи данных в
адресной строке.
Пары "имя-значение" присоединяются к адресу после вопросительного знака и разделяются между собой амперсандом (&)
Метод Post посылает на сервер данные в запросе браузера. Отправляется большее количество данных, чем метод Get, у него
ограничение 4Кб.
Большие объемы данных используются в форумах, почтовых службах, заполнении базы данных, при пересылке данных.

Элементы формы
Главным образом тег input предназначен для создания текстовых полей, различных кнопок, флажков и переключателей
Атрибуты:
name    - имя элемента формы
value   - значение, которое передается на сервер
type    - тип поля
Значения type
type = "password"   - вводить пароли, все содержимое поля изменяется на "точку"
type = "checkbox"   - квадратное поле с галочкой, Два состояния - отмеченное и не отмеченное
type = "radio"      - переключатель
type = "hidden"     - не отображается пользователю, при этом передается на сервер при отправке формы
type = "image"      - изображение, с поведением кнопки. При нажатии данные отправляются на сервер
type = "file"       - поле выбора и загрузки файла. В каждом браузере может иметь разный вид
type = "datetime"   - задает дату и время. Не все браузеры поддерживают
type = "date"       - текстовое поле с возможностью выбора даты
type = "time"       - задать время
type = "month"      - выбор месяца
type = "week"       - выбор недели в выпадающем календаре
type = "datetime-local" - задать дату и время в локальном формате
type = "search"     - поле для поиска
type = "number"     - вводить числа, имеет стрелочки для переключения значений
type = "range"      - ползунок, который можно перетягивать для выбора чисел в заданном диапазоне
type = "color"      - выбрать цвет из палитры цветов
type = "email"      - ввод email адреса
type = "url"        - ввода url адреса
type = "phone"      - ввод номера телефона. В обычных браузерах не работает. Если открыть в телефонном браузере, то
откроется цифровая клавиатура

select option name value

<select name="select">
    <option value="f1">Text 1</option>
    <option value="f2">Text 2</option>
    <option value="f3">Text 3</option>
    <option value="f4">Text 4</option>
</select>

Если нужен список с многозначным выбором, то следует указать атрибут multiple="multiple"

Метатеги -это теги HTML разметки, которые необходимы для предоставления структурированных метаданных электронного
документа - страницы сайта. Указываются в заголовке страницы (в теге <head>) и используются поисковыми системами для
определения информации на страницах для учета этих данных при ранжировании в поиске.

Настройка области просмотра для хорошего внешнего вида страницы на всех устройствах
<meta name="viewport" content="width=device-width, initial-scale=1.0">

Определение ключевых слов на странице
<meta name="keywords" content="HTML,CSS">

Настройка описания страницы
<meta name="description" content="...">


Метатег <title></title> - это заголовок страницы в браузере, который также отображается в выдаче поисковых систем.
Метатег description - это краткое описание страницы сайта в браузере, которое отображается под метатегом <title>.
Учитывается поисковыми системами для определения содержания страницы с целью использования алгоритмов в распределении 
сайтов в результатах поиска, на странице виден посетителям.

Список устаревших элементов и атрибутов:
Элементы:
basefont
big
center
font
plaintext
s
srtike
tt
u

Атрибуты

align
background
bgcolor
border
cellpadding
cellspacing
height
valign
width
-------------------------------------------------------------------------------
-- CSS
-----
Способы добавления стилей на страницу

1. inline или внутренние стили подключаются атрибутом style. <p style="...">Some text</p>
2. Глобальные стили устанавливаются тегом <style>, которые размещен в теге <heaad>
    <head>
        <style></style>
    </head>
3. Тегом <link> в атрибуте href которого задается путь к файлу со стилями. Файл должен иметь расширение .css. Тег <link>
размещается в теге <head>
    <link href="url" rel="stylesheet">
    
    Селектор элемента
    
    Если в качестве селектора выступает тег, то все элементы данного тега будут соответствовать заданным стилям.
    
    p
    {
        font-family:Arial;
        font-size:18:pt;
        color:green;        
    }
    
    Селектор класс
    
    Если необходимо задать сили для индивидуального элемента или задать разные стили для одного тега используют
    селектор класс.
    Имена классов должны начинаться с латинского символа и могут содержать дефис и подчеркивание
    Что бы привязать к элементу класс, необходимо в открывающем теге задать атрибут class и присвоить ему имя класс,
    описанного в стилях.
    
    <p class="testClass">Content</p>
    
    .testClass
    {
        font-family:Arial;
        font-size:18:pt;
        color:green;        
    }
    
    Селектор идентификатор
    Идентификатор - особенный вид селектора, которым помечается один элемент на странице.Что бы указать селектор
    идентификатор, в CSS необходимо использовать
    конструкцию #имя_идентификатора
    
    Чтобы привязать к элементу идентификатор, необходимо в открывающем теге задать отрибут id и присвоить ему имя
    идентификатора, описаного в стилях.
    
    <p id="id1">Content</p>
    
    #id1 
    {
        font-family:Arial;
        font-size:18:pt;
        color:green;        
    }
    
Приоритеты селекторов:
1. Идентификатор
2. Класс
3. Элемент

direction управляет следующими возможностями:
- способ отображения текста в блоке
- порядок колонок в таблице
- позиция полосы прокрутки в блоке
- ltr - устанавливает направление слева направо
- rtl - устанавливает направление слева направо
- inherit - наследует значение родителя

z-index - определяет уровень размещения элементов в стеке,
в глубину html-документа.
Свойства:
auto - элементы накладываются друг на друга в порядке по умолчанию
целое число - чем выше, тем более высокую позицию занимает элемент
по отношению к тем элементам, значение которых ниже.
При равном значении z-index на переднем плане находится тот элемент,
который в коде HTML находится ниже остальных.


Работа со шрифтами

Font            универсальное свойство, позволяет устанавливать несколько характеристик шрифта
Font-family     устанавливает семейство шрифта для оформления текста содержимого
Font-size       определяет размер шрифта элемента
Font-stretch    устанавливает узкое, нормальное или широкое начертание шрифта
Font-style      задает начертание шрифта
Font-variant    определяет как представлять строчные буквы
Font-weight     устанавливает насышенность шрифта

rem считается от корневого элемента, представляет собой тег HTML
em считается от базового элемента, в который вложенный. 

Свойство font объединяет все свойства шрифта, используемого на странице
font: font-style font-variant font-weight font-size/line-height font-family
Пример:
p{ font: italic bold 14px Arial; }
    

Сложные селекторы:

Контекстные
Соседние
Дочерние
Селекторы атрибутов

Универсальный селектор применяет стили ко всем элемента разметки
Стоит применять с оторожностью
Не рекомендуется применять. Лучше применить селекторы тегов и другие

Селекторы атрибутов выбирают элементы на основе имени атрибута или значения атрибута
[атрибут] - все элементы, содержащие указанный атрибут
селектор[атрибут] - элементы данного типа, содержащие указанный атрибут
селектор[атрибут="значение"] - элементы данного типа, содержащие указанный атрибут с конкретным значением
селектор[атрибут~="значение"] - элементы частично содержащие данное значение
селектор[атрибут|="значение"] - элементы, список значений атрибута которых начинается с указанного значения
селектор[атрибут^="значение"] - элементы, значение элемента которых начинается с указанного значения
селектор[атрибут$="значение"] - элементы, значение элемента которых заканчивается указанным значением
селектор[атрибут*="значение"] - элементы, значение элемента которых содержит в любом месте указанного значения

Псевдоэлементы позволяют задать стиль элементовне определенных в дереве элементов документа, а также генерировать
содержимое, которого нет в исходном коде текста

селектор::псевдоэлемент{стили}

Псевдоклассы - элементы CSS стилей, которое определяют динамическое состояние элементов, которое изменяется при
взаимодействии пользователя со страницей

селектор:псевдокласс{стили}

Свойство float позволяет перемещать любой элемент, выравнивая его по левому или правому краю веб-страницы или
содержащего его контейнера. При этом все остальные
элементы будут его игноривать, а строчные элементы будут смещаться вправо или влево, освобождая для него пространство.
Значения:
none - значение по умолчанию. Отменяет любое обтекание для элемента
left - элемент вытягивается из нормального потока элементов и позиционируется по левому краю контейнера.
right - элемент позиционируется по правому краю блока.
Могут "схлопываться" элементы

Свойство position позволяет точно задать новое местоположение элементу относительно того места,
где бы он находился в нормальном потоке.
По умолчанию все элементы распологаются последовательно друг за другом в том порядке, в котором они определены в
структуре документа. Значения:
static  используется по умолчанию. Позиционирование отсутствует.
relative    относительное позиционирование. Элемент сдвигается со своего обычного места в разных направлениях,
относительно границ родительского контейнера.
Место под элемент резервируется
absolute    абсолютное позиционирование. Элемент полностью удаляется из потока документа и позиционируется относительно
границ своего родительского элемента
с абсолютным или относительным позиционированием.
fixed   фиксирует элемент в указаном месте веб-страницы.

Виды верстки
Табличная
Блочная
-фиксированная
-резиновая
Валидная
Семантическая
Кроссбраузерная
Адаптивная
Верстка Flex-box

Рекомендуется использвать фреймворк bootstrap

*{
    -moz-box-sizing: border-box; /* Для Firefox */
    -webkit-box-sizing: border-box; /* Для Safari и Chrome */
    box-sizing: border-box; /* Для IE и Opera */
}

Синтаксис
position    static | absolute | ficed |
            relative | initial | inherit

static - значение по умолчанию. Элементы отображаются в браузере,
         точно так же, как они расспологаются в коде документа
absolute - элемент позиционируется относительно своего первого пози-
            ционированного родителя (только не со свойством static)
fixed - элемент позиционируется относительно окна браузера
relative - элемент позиционируется относительно своей обычной позиции.
         Например, left:50px; сдвинет его на 50 пикселов влево от его
         нормального места в потоке
initial - сбрасывает к значению по умолчанию
inherit - наследует значение родителя

Canvas

Для работы с canvas в версиях IE ниже 9 используется бибилиотека explorercanvas
(http://code.google.com/p/explorercanvas/)

Подключение библиотеки

<head>
	<!--[if lt IE 9]><script src="excanvas.js"></script> <![endif]-->
</head>

Получение контекста

var canvas=document.getElementById('c'); //поиск самого элемента канвас по ID
var context=canvas.getContext('2d'); //все рисование происходит через контекст. 2d - константа, строковое значение, которое указывает, что мы собираемся рисовать двухмерную графику


<canvas id="c">
</canvas>

   CSS-селекторые
-------------------------------------------------------------------------------
   селектор      значение                      пример написания
-------------------------------------------------------------------------------
      *          выбрать все                   * {margin:0; padding:0;)
                 элементы на странице

                 выбор всех дочерних           #container * {
                 элементов                     border:1px solid black; }

      #X         выбрать элементы по           #container {
                 идентификатору                border:1px solid black; }

     .X          выбрать элементы по           .container {
                 классу                        border:1px solid black; }

     X Y         селектор потомка.             li a {
                 Выбор Y если он               text-decoration:none; }
                 является потомком X

     X           селектор типа.                a {
                 Выбор всех серекторов         color: red; }
                 на странице

     X:link      селектор псевдо-              a:link { color:red; }
     X:visited   классов                       a:visited {color:purple;}
                 link - выбор всех
                 ссылок, на которых
                 еще не был совершен клик
                 visited - выбор всех
                 ссылок, по которым был
                 клик или переход

     X + Y       смежный селектор.             ul + p {
                 Каждый Y следующий сразу      color:red; }
                 после каждого X

     X > Y       Выбирает только прямых        #container > ul {
                 потомков                      border:1px solid black;}

    X ~ Y        Эта комбинация
                 сестринских
                 (сиблинговых) элементов
                 похожа на X + Y, но она
                 менее строгая. Если в
                 случае ul + p будут
                 выбраны только первые
                 элементы p, следующие
                 за ul (т.е. наблюдается
                 смежность в выборе),
                 то рассматриваемый нами
                 сейчас селектор более общий.
                 В нашем случае он отберет
                 все элементы p, следующие
                 за элементом ul.

  a[title]       Обращение к атрибуту          a[title] {
                 селектора. В нашем примере    color:green; }
                 будут окрашены в зеленый
                 цвет только ссылки, имеющие
                 атрибут title.

  X[href="f"]    Применяет стиль ко всем       a[href="http://www.f.com"] {
                 ссылкам, атрибут href         color:red; }
                 у которых равен f. Однако,
                 если будет //f или http://f,
                 придется использовать основые
                 регулярных выражений

   X[href*="f"]  Звездочка означает, что       a[href*="f"] {
                 искомое значение может        color: red; }
                 находиться в любой части
                 атрибута href.

   X[href^="f"]  Для отображения небольших     a[href^="f"] {
                 иконок рядом с ссылками,      color: red; }
                 ведущими на другие сайты.
                 Отбирает ссылки, у которых
                 атрибут href начинается с
                 f.

 X[href$=".jpg"] Так мы ищем все ссылки,       a[href$=".jpg"] {
                 которые ссылаются на          color: red; }
                 картинки с раширением
                 только .jpg.

 X[data-*="foo"] Как же мы можем охватить      a[data-filetype="image"] {
                 различные типы картинок?      color: red; }
                 Мы можем создать, например,
                 несколько селекторов:
                 a[href$=".jpg"],
                 a[href$=".jpeg"],
                 a[href$=".png"],
                 a[href$=".gif"] {
                 color: red;}
                 Но это муторно и не элегантно.
                 Другой вариант - это создать
                 собственный атрибут
                 data-filetype и добавить его
                 к каждой ссылке, ведущей на
                 картинку.
                 <a href="path/to/image.jpg"
                 data-filetype="image">Ссылка</a>
                 Поступив таким образом, мы можем
                 использовать код данного примера

  X[foo~="bar"]  Знак ~ (тильда) позволяет нам        /* Отобрать атрибут
                 выбирать атрибуты со значениями,     data-info, который
                 разделенными пробелами, т.е.         содержит значение
                 <a href="path/to/image.jpg"          external */
                 data-info="external image">          a[data-info~="external"]{
                 Кликни сюда</a>                      color: red; }
                 Используя данный прием мы можем      /* Отобрать атрибут
                 делать выборки с нужными нам         data-info, который
                 комбинациями:                        содержит значение
                                                      image */
                                                      a[data-info~="image"] {
                                                      border: 1px solid black;}

  X:checked     Этот псевдо-класс отбирает те      input[type=radio]:checked {
                элементы, которые были отмечены,   border: 1px solid black; }
                например, радиокнопку или
                чекбокс.

  X:after       Данный псевдо-класс позволяет      .clearfix:after {
                сгенерировать контент вокруг       content: "";
                выбранного элемента.               display: block;
                Данный пример показывает,          clear: both;
                как с помощью псевдо-класса        visibility: hidden;
                :after после блока с классом       font-size: 0;
                .clearfix создаётся пустая         height: 0;    }
                строка, после чего очищается.
                Хороший метод, когда               .clearfix {
                невозможно применить               *display: inline-block;
                overflow: hidden.                  _height: 1%;  }

  X:hover       Применение стилей, когда на   div:hover {
                элемент наводится курсор      border-bottom: 1px solid black; }
                мыши.
                border-bottom: 1px solid black;
                выглядит лучше, чем
                text-decoration: underline;

X:not(selector) Отрицание. Выбор всех блоков,     div:not(#container) {
                кроме одного, с id = #container   color: blue; }

                Выбрать всех элементов,           *:not(p) {
                кроме тэгов параграфов            color: green; }

X::pseudoElement Псевдоэлементы можно
                 использовать для придания
                 стилей фрагменту элемента,
                 например, первой строке или
                 первой букве. Применяется
                 только к блочным элементам.
                 Выбираем первую букву параграфа:        p::first-letter {
                                                         float: left;
                                                         font-size: 2em;
                                                         font-weight: bold;
                                                         font-family: cursive;
                                                         padding-right: 2px; }
                 Выбираем первую строку параграфа:       p::first-line {
                                                         font-weight: bold;
                                                         font-size: 1.2em; }

 X:nth-child(n)  Данный псевдо-класс позволяет     li:nth-child(3) {
                 обратиться к конкретному          color: green; }
                 порядковому элементу-потомку
                 Выбрать каждый четвертый
                 элемент списка  li:nth-child(4n).

 X:nth-last-child(n)   Выбрать элемент списка
                       с конца, например, третий   li:nth-last-child(2) {
                                                   color: green; }

  X:nth-of-type(n) Выбор по типу элемента   ul:nth-of-type(3) {
                                            border: 1px solid black; }

  X:nth-last-of-type(n)  Выбрать n-ный элемент        ul:nth-last-of-type(3) {
                         определенного типа с конца.  border: 1px solid black;}

  X:first-child  Этот псевдо-класс позволяет    ul li:first-child {
                 выбрать только первого          border-top: none; }
                 потомка родительского
                 элемента. Часто используется
                 для удаления границ первого и
                 последнего элементов списка.
                 К примеру, если у вас есть
                 список рядов, каждый из которых
                 имеет border-top и border-bottom,
                 то последний и первый элементы
                 списка будут немного выбиваться
                 из общего строя.
                 Для устранения этого недостатка
                 можно использовать данный псевдо-класс.

  X:last-child   В противоположность классу             ul > li:last-child {
                 first-child, last-child выберет        color: green; }
                 последний элемент родительского элемента.

  X:only-child   Выбор только тех элементов,        div p:only-child {
                 которые являются единственными     color: green; }
                 потомками для своих родителей.

  X:only-of-type Этот псевдо-класс выбирает         li:only-of-type {
                 элементы, которые не имеют         font-weight: bold; }
                 сестринских элементов в
                 содержащем их контейнере.
                 Например, давайте выберем
                 все ul, которые содержат
                 одинокие li.

  X:first-of-type   Этот псевдо-класс позволяет
                    отобрать первого сиблинга
                    того же типа.
                    Чтобы лучше это понять,
                    посмотрите следующий код:
                    <div>
                       <p>Здесь параграф.</p>
                          <ul>
                                <li>Элемент 1.</li>
                                <li>Элемент 2.</li>
                          </ul>
                          <ul>
                                <li>Элемент 3.</li>
                                <li>Элемент 4.</li>
                          </ul>
                    </div>
                    Надо придать стиль только "элементу 2".

                    Решение 1

                    Есть много способов решить данную задачу.
                    Рассмотри лишь некоторые из них.
                    Начнем с использования first-of-type:

                    ul:first-of-type > li:nth-child(2) {
                       font-weight: bold; }

                    Данный код гласит:
                    "Найди первый неупорядоченный список на странице,
                    затем найди только его прямых потомков,
                    являющихся элементами li. После этого выбери
                    только второй по порядку элемент li."

                    Решение 2

                    Другой вариант - воспользоваться смежным селектором:

                    p + ul li:last-child {
                       font-weight: bold; }

                    Здесь мы находим ul, следующий непосредственно
                    за тэгом параграфа, после чего находим самый
                    последний его дочерний элемент.

                    Решение 3

                    Можно еще немного поиграть с селекторами и
                    поступить таким образом:

                    ul:first-of-type li:nth-last-child(1) {
                       font-weight: bold; }

                    Сейчас мы уже получаем первый элемент ul на странице,
                    затем ищем самый первый элемент li, но начиная с конца.
-------------------------------------------------------------------------------
-- GitHub
-----
https://github.com/AngZAU/IvanTask.git

or create a new repository on the command line

echo "# IvanTask" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/AngZAU/IvanTask.git
git push -u origin main

or push an existing repository from the command line

git remote add origin https://github.com/AngZAU/IvanTask.git
git branch -M main
git push -u origin main

-------------------------------------------------------------------------------
-- Git
-----
просмотреть все команды, которые можно использовать в git
git --help

просмотр конфигурации
git config --list

просмотр глобальных настроек
git config --global --list

изменение глобальной конфигурации user.name (изменяем текущее на Name)
git config --global user.name 'Name'

инициализация git (надо находиться в той папке, откуда будем брать файлы для git)
git init

выводит информацию о текущем состоянии git
git status

добавление изменений в git
git commit -a -m"h1 was add"

посмотреть, что изменилось (изменения показываются зеленым цветом)
git log -p

удаление области изменений в файле (в данном случае head) из области изменений для git
git reset HEAD index.html

определение количества изменений для демонстрации (в данном случае мы увидим последние 2 изменения, которые были зафиксированы в git)
git log -2

Чтобы посмотреть все установленные настройки и узнать где именно они заданы
git config --list --show-origin
-------------------------------------------------------------------------------
-- Javascript selectors
-----

document.querySelectorAll('.col-header__3')

-------------------------------------------------------------------------------
--PHPStorm
-----
Групповое переименование в проекте

1. Выделить то, что необходимо переименовать. Скопировать в буфер обмена
2. Выделить папку в дереве Project и нажать Cntr+Shift+R
3. Вставить выделенный текст в вверхнее поле, а текст для замены
 в нижнее поле
4. Нажать на кнопку Replace All
-------------------------------------------------------------------------------



