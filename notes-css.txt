-------------------------------------------------------------------------------
-- CSS
-----
Способы добавления стилей на страницу

1. inline или внутренние стили подключаются атрибутом style. <p style="...">Some text</p>
2. Глобальные стили устанавливаются тегом <style>, которые размещен в теге <heaad>
    <head>
        <style></style>
    </head>
3. Тегом <link> в атрибуте href которого задается путь к файлу со стилями. Файл должен иметь расширение .css. Тег <link>
размещается в теге <head>
    <link href="url" rel="stylesheet">

    Селектор элемента

    Если в качестве селектора выступает тег, то все элементы данного тега будут соответствовать заданным стилям.

    p
    {
        font-family:Arial;
        font-size:18:pt;
        color:green;
    }

    Селектор класс

    Если необходимо задать сили для индивидуального элемента или задать разные стили для одного тега используют
    селектор класс.
    Имена классов должны начинаться с латинского символа и могут содержать дефис и подчеркивание
    Что бы привязать к элементу класс, необходимо в открывающем теге задать атрибут class и присвоить ему имя класс,
    описанного в стилях.

    <p class="testClass">Content</p>

    .testClass
    {
        font-family:Arial;
        font-size:18:pt;
        color:green;
    }

    Селектор идентификатор
    Идентификатор - особенный вид селектора, которым помечается один элемент на странице.Что бы указать селектор
    идентификатор, в CSS необходимо использовать
    конструкцию #имя_идентификатора

    Чтобы привязать к элементу идентификатор, необходимо в открывающем теге задать отрибут id и присвоить ему имя
    идентификатора, описаного в стилях.

    <p id="id1">Content</p>

    #id1
    {
        font-family:Arial;
        font-size:18:pt;
        color:green;
    }

Приоритеты селекторов:
1. Идентификатор
2. Класс
3. Элемент

direction управляет следующими возможностями:
- способ отображения текста в блоке
- порядок колонок в таблице
- позиция полосы прокрутки в блоке
- ltr - устанавливает направление слева направо
- rtl - устанавливает направление слева направо
- inherit - наследует значение родителя

z-index - определяет уровень размещения элементов в стеке,
в глубину html-документа.
Свойства:
auto - элементы накладываются друг на друга в порядке по умолчанию
целое число - чем выше, тем более высокую позицию занимает элемент
по отношению к тем элементам, значение которых ниже.
При равном значении z-index на переднем плане находится тот элемент,
который в коде HTML находится ниже остальных.


Работа со шрифтами

Font            универсальное свойство, позволяет устанавливать несколько характеристик шрифта
Font-family     устанавливает семейство шрифта для оформления текста содержимого
Font-size       определяет размер шрифта элемента
Font-stretch    устанавливает узкое, нормальное или широкое начертание шрифта
Font-style      задает начертание шрифта
Font-variant    определяет как представлять строчные буквы
Font-weight     устанавливает насышенность шрифта

rem считается от корневого элемента, представляет собой тег HTML
em считается от базового элемента, в который вложенный.

Свойство font объединяет все свойства шрифта, используемого на странице
font: font-style font-variant font-weight font-size/line-height font-family
Пример:
p{ font: italic bold 14px Arial; }


Сложные селекторы:

Контекстные
Соседние
Дочерние
Селекторы атрибутов

Универсальный селектор применяет стили ко всем элемента разметки
Стоит применять с оторожностью
Не рекомендуется применять. Лучше применить селекторы тегов и другие

Селекторы атрибутов выбирают элементы на основе имени атрибута или значения атрибута
[атрибут] - все элементы, содержащие указанный атрибут
селектор[атрибут] - элементы данного типа, содержащие указанный атрибут
селектор[атрибут="значение"] - элементы данного типа, содержащие указанный атрибут с конкретным значением
селектор[атрибут~="значение"] - элементы частично содержащие данное значение
селектор[атрибут|="значение"] - элементы, список значений атрибута которых начинается с указанного значения
селектор[атрибут^="значение"] - элементы, значение элемента которых начинается с указанного значения
селектор[атрибут$="значение"] - элементы, значение элемента которых заканчивается указанным значением
селектор[атрибут*="значение"] - элементы, значение элемента которых содержит в любом месте указанного значения

Псевдоэлементы позволяют задать стиль элементовне определенных в дереве элементов документа, а также генерировать
содержимое, которого нет в исходном коде текста

селектор::псевдоэлемент{стили}

Псевдоклассы - элементы CSS стилей, которое определяют динамическое состояние элементов, которое изменяется при
взаимодействии пользователя со страницей

селектор:псевдокласс{стили}

Свойство float позволяет перемещать любой элемент, выравнивая его по левому или правому краю веб-страницы или
содержащего его контейнера. При этом все остальные
элементы будут его игноривать, а строчные элементы будут смещаться вправо или влево, освобождая для него пространство.
Значения:
none - значение по умолчанию. Отменяет любое обтекание для элемента
left - элемент вытягивается из нормального потока элементов и позиционируется по левому краю контейнера.
right - элемент позиционируется по правому краю блока.
Могут "схлопываться" элементы

Свойство position позволяет точно задать новое местоположение элементу относительно того места,
где бы он находился в нормальном потоке.
По умолчанию все элементы распологаются последовательно друг за другом в том порядке, в котором они определены в
структуре документа. Значения:
static  используется по умолчанию. Позиционирование отсутствует.
relative    относительное позиционирование. Элемент сдвигается со своего обычного места в разных направлениях,
относительно границ родительского контейнера.
Место под элемент резервируется
absolute    абсолютное позиционирование. Элемент полностью удаляется из потока документа и позиционируется относительно
границ своего родительского элемента
с абсолютным или относительным позиционированием.
fixed   фиксирует элемент в указаном месте веб-страницы.

Виды верстки
Табличная
Блочная
-фиксированная
-резиновая
Валидная
Семантическая
Кроссбраузерная
Адаптивная
Верстка Flex-box

Рекомендуется использвать фреймворк bootstrap

*{
    -moz-box-sizing: border-box; /* Для Firefox */
    -webkit-box-sizing: border-box; /* Для Safari и Chrome */
    box-sizing: border-box; /* Для IE и Opera */
}

Синтаксис
position    static | absolute | ficed |
            relative | initial | inherit

static - значение по умолчанию. Элементы отображаются в браузере,
         точно так же, как они расспологаются в коде документа
absolute - элемент позиционируется относительно своего первого пози-
            ционированного родителя (только не со свойством static)
fixed - элемент позиционируется относительно окна браузера
relative - элемент позиционируется относительно своей обычной позиции.
         Например, left:50px; сдвинет его на 50 пикселов влево от его
         нормального места в потоке
initial - сбрасывает к значению по умолчанию
inherit - наследует значение родителя

Canvas

Для работы с canvas в версиях IE ниже 9 используется бибилиотека explorercanvas
(http://code.google.com/p/explorercanvas/)

Подключение библиотеки

<head>
	<!--[if lt IE 9]><script src="excanvas.js"></script> <![endif]-->
</head>

Получение контекста

var canvas=document.getElementById('c'); //поиск самого элемента канвас по ID
var context=canvas.getContext('2d'); //все рисование происходит через контекст. 2d - константа, строковое значение, которое указывает, что мы собираемся рисовать двухмерную графику


<canvas id="c">
</canvas>

   CSS-селекторые
-------------------------------------------------------------------------------
   селектор      значение                      пример написания
-------------------------------------------------------------------------------
      *          выбрать все                   * {margin:0; padding:0;)
                 элементы на странице

                 выбор всех дочерних           #container * {
                 элементов                     border:1px solid black; }

      #X         выбрать элементы по           #container {
                 идентификатору                border:1px solid black; }

     .X          выбрать элементы по           .container {
                 классу                        border:1px solid black; }

     X Y         селектор потомка.             li a {
                 Выбор Y если он               text-decoration:none; }
                 является потомком X

     X           селектор типа.                a {
                 Выбор всех серекторов         color: red; }
                 на странице

     X:link      селектор псевдо-              a:link { color:red; }
     X:visited   классов                       a:visited {color:purple;}
                 link - выбор всех
                 ссылок, на которых
                 еще не был совершен клик
                 visited - выбор всех
                 ссылок, по которым был
                 клик или переход

     X + Y       смежный селектор.             ul + p {
                 Каждый Y следующий сразу      color:red; }
                 после каждого X

     X > Y       Выбирает только прямых        #container > ul {
                 потомков                      border:1px solid black;}

    X ~ Y        Эта комбинация
                 сестринских
                 (сиблинговых) элементов
                 похожа на X + Y, но она
                 менее строгая. Если в
                 случае ul + p будут
                 выбраны только первые
                 элементы p, следующие
                 за ul (т.е. наблюдается
                 смежность в выборе),
                 то рассматриваемый нами
                 сейчас селектор более общий.
                 В нашем случае он отберет
                 все элементы p, следующие
                 за элементом ul.

  a[title]       Обращение к атрибуту          a[title] {
                 селектора. В нашем примере    color:green; }
                 будут окрашены в зеленый
                 цвет только ссылки, имеющие
                 атрибут title.

  X[href="f"]    Применяет стиль ко всем       a[href="http://www.f.com"] {
                 ссылкам, атрибут href         color:red; }
                 у которых равен f. Однако,
                 если будет //f или http://f,
                 придется использовать основые
                 регулярных выражений

   X[href*="f"]  Звездочка означает, что       a[href*="f"] {
                 искомое значение может        color: red; }
                 находиться в любой части
                 атрибута href.

   X[href^="f"]  Для отображения небольших     a[href^="f"] {
                 иконок рядом с ссылками,      color: red; }
                 ведущими на другие сайты.
                 Отбирает ссылки, у которых
                 атрибут href начинается с
                 f.

 X[href$=".jpg"] Так мы ищем все ссылки,       a[href$=".jpg"] {
                 которые ссылаются на          color: red; }
                 картинки с раширением
                 только .jpg.

 X[data-*="foo"] Как же мы можем охватить      a[data-filetype="image"] {
                 различные типы картинок?      color: red; }
                 Мы можем создать, например,
                 несколько селекторов:
                 a[href$=".jpg"],
                 a[href$=".jpeg"],
                 a[href$=".png"],
                 a[href$=".gif"] {
                 color: red;}
                 Но это муторно и не элегантно.
                 Другой вариант - это создать
                 собственный атрибут
                 data-filetype и добавить его
                 к каждой ссылке, ведущей на
                 картинку.
                 <a href="path/to/image.jpg"
                 data-filetype="image">Ссылка</a>
                 Поступив таким образом, мы можем
                 использовать код данного примера

  X[foo~="bar"]  Знак ~ (тильда) позволяет нам        /* Отобрать атрибут
                 выбирать атрибуты со значениями,     data-info, который
                 разделенными пробелами, т.е.         содержит значение
                 <a href="path/to/image.jpg"          external */
                 data-info="external image">          a[data-info~="external"]{
                 Кликни сюда</a>                      color: red; }
                 Используя данный прием мы можем      /* Отобрать атрибут
                 делать выборки с нужными нам         data-info, который
                 комбинациями:                        содержит значение
                                                      image */
                                                      a[data-info~="image"] {
                                                      border: 1px solid black;}

  X:checked     Этот псевдо-класс отбирает те      input[type=radio]:checked {
                элементы, которые были отмечены,   border: 1px solid black; }
                например, радиокнопку или
                чекбокс.

  X:after       Данный псевдо-класс позволяет      .clearfix:after {
                сгенерировать контент вокруг       content: "";
                выбранного элемента.               display: block;
                Данный пример показывает,          clear: both;
                как с помощью псевдо-класса        visibility: hidden;
                :after после блока с классом       font-size: 0;
                .clearfix создаётся пустая         height: 0;    }
                строка, после чего очищается.
                Хороший метод, когда               .clearfix {
                невозможно применить               *display: inline-block;
                overflow: hidden.                  _height: 1%;  }

  X:hover       Применение стилей, когда на   div:hover {
                элемент наводится курсор      border-bottom: 1px solid black; }
                мыши.
                border-bottom: 1px solid black;
                выглядит лучше, чем
                text-decoration: underline;

X:not(selector) Отрицание. Выбор всех блоков,     div:not(#container) {
                кроме одного, с id = #container   color: blue; }

                Выбрать всех элементов,           *:not(p) {
                кроме тэгов параграфов            color: green; }

X::pseudoElement Псевдоэлементы можно
                 использовать для придания
                 стилей фрагменту элемента,
                 например, первой строке или
                 первой букве. Применяется
                 только к блочным элементам.
                 Выбираем первую букву параграфа:        p::first-letter {
                                                         float: left;
                                                         font-size: 2em;
                                                         font-weight: bold;
                                                         font-family: cursive;
                                                         padding-right: 2px; }
                 Выбираем первую строку параграфа:       p::first-line {
                                                         font-weight: bold;
                                                         font-size: 1.2em; }

 X:nth-child(n)  Данный псевдо-класс позволяет     li:nth-child(3) {
                 обратиться к конкретному          color: green; }
                 порядковому элементу-потомку
                 Выбрать каждый четвертый
                 элемент списка  li:nth-child(4n).

 X:nth-last-child(n)   Выбрать элемент списка
                       с конца, например, третий   li:nth-last-child(2) {
                                                   color: green; }

  X:nth-of-type(n) Выбор по типу элемента   ul:nth-of-type(3) {
                                            border: 1px solid black; }

  X:nth-last-of-type(n)  Выбрать n-ный элемент        ul:nth-last-of-type(3) {
                         определенного типа с конца.  border: 1px solid black;}

  X:first-child  Этот псевдо-класс позволяет    ul li:first-child {
                 выбрать только первого          border-top: none; }
                 потомка родительского
                 элемента. Часто используется
                 для удаления границ первого и
                 последнего элементов списка.
                 К примеру, если у вас есть
                 список рядов, каждый из которых
                 имеет border-top и border-bottom,
                 то последний и первый элементы
                 списка будут немного выбиваться
                 из общего строя.
                 Для устранения этого недостатка
                 можно использовать данный псевдо-класс.

  X:last-child   В противоположность классу             ul > li:last-child {
                 first-child, last-child выберет        color: green; }
                 последний элемент родительского элемента.

  X:only-child   Выбор только тех элементов,        div p:only-child {
                 которые являются единственными     color: green; }
                 потомками для своих родителей.

  X:only-of-type Этот псевдо-класс выбирает         li:only-of-type {
                 элементы, которые не имеют         font-weight: bold; }
                 сестринских элементов в
                 содержащем их контейнере.
                 Например, давайте выберем
                 все ul, которые содержат
                 одинокие li.

  X:first-of-type   Этот псевдо-класс позволяет
                    отобрать первого сиблинга
                    того же типа.
                    Чтобы лучше это понять,
                    посмотрите следующий код:
                    <div>
                       <p>Здесь параграф.</p>
                          <ul>
                                <li>Элемент 1.</li>
                                <li>Элемент 2.</li>
                          </ul>
                          <ul>
                                <li>Элемент 3.</li>
                                <li>Элемент 4.</li>
                          </ul>
                    </div>
                    Надо придать стиль только "элементу 2".

                    Решение 1

                    Есть много способов решить данную задачу.
                    Рассмотри лишь некоторые из них.
                    Начнем с использования first-of-type:

                    ul:first-of-type > li:nth-child(2) {
                       font-weight: bold; }

                    Данный код гласит:
                    "Найди первый неупорядоченный список на странице,
                    затем найди только его прямых потомков,
                    являющихся элементами li. После этого выбери
                    только второй по порядку элемент li."

                    Решение 2

                    Другой вариант - воспользоваться смежным селектором:

                    p + ul li:last-child {
                       font-weight: bold; }

                    Здесь мы находим ul, следующий непосредственно
                    за тэгом параграфа, после чего находим самый
                    последний его дочерний элемент.

                    Решение 3

                    Можно еще немного поиграть с селекторами и
                    поступить таким образом:

                    ul:first-of-type li:nth-last-child(1) {
                       font-weight: bold; }

                    Сейчас мы уже получаем первый элемент ul на странице,
                    затем ищем самый первый элемент li, но начиная с конца.